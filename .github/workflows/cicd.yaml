# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches: [ "feat/#7-cicd" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yaml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yaml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yaml

        shell: bash

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      - name: Docker build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/dd .
          docker push ${{ secrets.DOCKER_REPO }}/dd

      ## deploy to develop
      - name: Deploy docker
        uses: appleboy/ssh-action@master
        id: deploy-docker
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_REPO }}/dd
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/dd
            sudo docker image prune -f